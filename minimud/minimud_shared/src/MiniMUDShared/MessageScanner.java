/* The following code was generated by JFlex 1.4.1 on 10/25/13 6:50 AM */

package MiniMUDShared;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10/25/13 6:50 AM from the specification file
 * <tt>./MiniMUDShared/MessageScanner.jflex</tt>
 */
class MessageScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\37\1\37\2\0\1\37\22\0\1\37\1\0\1\34\4\0"+
    "\1\32\1\31\1\31\2\0\1\31\2\0\1\27\12\36\1\31\2\0"+
    "\1\31\3\0\32\35\2\0\1\33\1\0\1\4\1\0\1\10\1\35"+
    "\1\26\1\25\1\2\1\11\1\7\1\30\1\22\2\35\1\15\1\5"+
    "\1\23\1\13\1\14\1\20\1\12\1\6\1\1\1\21\1\17\1\24"+
    "\1\3\1\16\1\35\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\20\0\1\2\2\0\1\1\1\3\2\4\1\5"+
    "\14\4\1\6\4\4\4\0\1\7\22\4\5\0\2\4"+
    "\1\10\1\11\1\12\3\4\1\13\4\4\1\14\3\4"+
    "\1\15\1\16\1\0\1\17\2\0\1\20\1\4\1\0"+
    "\2\4\1\21\6\4\1\22\1\4\1\23\2\0\1\4"+
    "\1\0\1\4\1\24\4\4\1\25\1\26\1\0\4\4"+
    "\1\27\1\0\1\4\1\0\1\30\1\0\3\4\3\0"+
    "\1\31\2\4\2\0\1\4\1\32\1\0\2\4\4\0"+
    "\2\4\1\0\1\33\1\4\1\0\1\34\1\35\4\0"+
    "\1\36\1\37\1\0\1\4\6\0\1\4\6\0\1\4"+
    "\2\0\1\40\1\0\1\41\1\42\1\4\1\43\1\44"+
    "\1\45\23\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\240\0\300\0\340"+
    "\0\u0100\0\u0120\0\u0140\0\u0160\0\u0180\0\u01a0\0\u01c0\0\u01e0"+
    "\0\u0200\0\u0220\0\u0240\0\u0260\0\u0280\0\u0220\0\u02a0\0\u02c0"+
    "\0\u02a0\0\u02e0\0\u0300\0\u0320\0\u0340\0\u0360\0\u0380\0\u03a0"+
    "\0\u03c0\0\u03e0\0\u0400\0\u0420\0\u0440\0\u02a0\0\u0460\0\u0480"+
    "\0\u04a0\0\u04c0\0\u04e0\0\u0500\0\u0520\0\u0540\0\u0220\0\u0560"+
    "\0\u0580\0\u05a0\0\u05c0\0\u05e0\0\u0600\0\u0620\0\u0640\0\u0660"+
    "\0\u0680\0\u06a0\0\u06c0\0\u06e0\0\u0700\0\u0720\0\u0740\0\u0760"+
    "\0\u0780\0\u07a0\0\u07c0\0\u07e0\0\u0800\0\u0820\0\u0840\0\u0860"+
    "\0\u0840\0\u0840\0\u0840\0\u0880\0\u08a0\0\u08c0\0\u0840\0\u08e0"+
    "\0\u0900\0\u0920\0\u0940\0\u0840\0\u0960\0\u0980\0\u09a0\0\u0840"+
    "\0\u0840\0\u09c0\0\u0220\0\u09e0\0\u0a00\0\u0220\0\u0a20\0\u0a40"+
    "\0\u0a60\0\u0a80\0\u0aa0\0\u0ac0\0\u0ae0\0\u0b00\0\u0b20\0\u0b40"+
    "\0\u0b60\0\u0b80\0\u0ba0\0\u0220\0\u0bc0\0\u0be0\0\u0c00\0\u0c20"+
    "\0\u0c40\0\u0c60\0\u0c80\0\u0ca0\0\u0cc0\0\u0ce0\0\u0c00\0\u0c00"+
    "\0\u0d00\0\u0d20\0\u0d40\0\u0d60\0\u0d80\0\u0220\0\u0da0\0\u0dc0"+
    "\0\u0de0\0\u0dc0\0\u0e00\0\u0e20\0\u0e40\0\u0e60\0\u0e80\0\u0ea0"+
    "\0\u0ec0\0\u0dc0\0\u0ee0\0\u0f00\0\u0f20\0\u0f40\0\u0f60\0\u0220"+
    "\0\u0f80\0\u0fa0\0\u0fc0\0\u0fe0\0\u1000\0\u1020\0\u1040\0\u1060"+
    "\0\u1080\0\u10a0\0\u0220\0\u10c0\0\u10e0\0\u10c0\0\u10c0\0\u1100"+
    "\0\u1120\0\u1140\0\u1160\0\u10c0\0\u10c0\0\u1180\0\u11a0\0\u11c0"+
    "\0\u11e0\0\u1200\0\u1220\0\u1240\0\u1260\0\u1280\0\u12a0\0\u12c0"+
    "\0\u12e0\0\u1300\0\u1320\0\u1340\0\u1360\0\u1380\0\u13a0\0\u0220"+
    "\0\u13c0\0\u0220\0\u0220\0\u13e0\0\u0220\0\u0220\0\u0220\0\u1400"+
    "\0\u1420\0\u1440\0\u1460\0\u1480\0\u14a0\0\u14c0\0\u14e0\0\u1500"+
    "\0\u1520\0\u1540\0\u1560\0\u1580\0\u15a0\0\u15c0\0\u15e0\0\u1600"+
    "\0\u1620\0\u0220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\0\1\5\1\6\2\4"+
    "\1\7\1\10\1\4\1\11\1\12\2\4\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\4\1\21\1\4\1\22"+
    "\1\23\1\0\1\24\1\4\1\25\1\26\1\0\1\27"+
    "\1\30\1\27\1\0\6\27\1\31\2\27\1\32\10\27"+
    "\1\0\1\27\4\0\2\27\2\0\2\27\1\33\1\0"+
    "\3\27\1\34\16\27\1\0\1\27\4\0\2\27\2\0"+
    "\3\27\1\0\22\27\1\0\1\27\4\0\2\27\2\0"+
    "\1\27\1\35\1\27\1\0\22\27\1\0\1\27\4\0"+
    "\2\27\2\0\1\27\1\36\1\27\1\0\6\27\1\37"+
    "\13\27\1\0\1\27\4\0\2\27\2\0\3\27\1\0"+
    "\5\27\1\40\14\27\1\0\1\27\4\0\2\27\2\0"+
    "\1\27\1\41\1\27\1\0\22\27\1\0\1\27\4\0"+
    "\2\27\2\0\3\27\1\0\3\27\1\42\4\27\1\43"+
    "\11\27\1\0\1\27\4\0\2\27\2\0\3\27\1\0"+
    "\6\27\1\44\13\27\1\0\1\27\4\0\2\27\2\0"+
    "\3\27\1\0\14\27\1\45\5\27\1\0\1\27\4\0"+
    "\2\27\2\0\3\27\1\0\7\27\1\46\12\27\1\0"+
    "\1\27\4\0\2\27\2\0\3\27\1\0\16\27\1\47"+
    "\3\27\1\0\1\27\4\0\2\27\2\0\3\27\1\0"+
    "\6\27\1\50\13\27\1\0\1\27\4\0\2\27\2\0"+
    "\1\27\1\51\1\27\1\0\22\27\1\0\1\27\4\0"+
    "\2\27\2\0\3\27\1\0\6\27\1\52\13\27\1\0"+
    "\1\27\4\0\2\27\2\0\1\53\4\0\1\54\15\0"+
    "\1\55\53\0\32\56\1\0\5\56\34\24\1\57\3\24"+
    "\36\0\1\25\2\0\3\60\1\0\22\60\1\0\1\60"+
    "\4\0\2\60\2\0\2\60\1\61\1\0\22\60\1\0"+
    "\1\60\4\0\2\60\2\0\3\60\1\0\7\60\1\62"+
    "\12\60\1\0\1\60\4\0\2\60\2\0\3\60\1\0"+
    "\15\60\1\63\4\60\1\0\1\60\4\0\2\60\2\0"+
    "\3\60\1\0\1\60\1\64\20\60\1\0\1\60\4\0"+
    "\2\60\2\0\3\60\1\0\1\60\1\65\20\60\1\0"+
    "\1\60\4\0\2\60\2\0\3\60\1\0\5\60\1\66"+
    "\14\60\1\0\1\60\4\0\2\60\2\0\3\60\1\0"+
    "\14\60\1\67\5\60\1\0\1\60\4\0\2\60\2\0"+
    "\3\60\1\0\6\60\1\70\13\60\1\0\1\60\4\0"+
    "\2\60\2\0\3\60\1\0\13\60\1\71\6\60\1\0"+
    "\1\60\4\0\2\60\2\0\3\60\1\0\1\60\1\72"+
    "\20\60\1\0\1\60\4\0\2\60\2\0\3\60\1\0"+
    "\3\60\1\73\16\60\1\0\1\60\4\0\2\60\2\0"+
    "\3\60\1\0\2\60\1\74\17\60\1\0\1\60\4\0"+
    "\2\60\2\0\3\60\1\0\15\60\1\75\4\60\1\0"+
    "\1\60\4\0\2\60\2\0\3\60\1\0\12\60\1\76"+
    "\7\60\1\0\1\60\4\0\2\60\2\0\3\60\1\0"+
    "\5\60\1\77\14\60\1\0\1\60\4\0\2\60\2\0"+
    "\3\60\1\0\1\60\1\100\20\60\1\0\1\60\4\0"+
    "\2\60\2\0\3\60\1\0\17\60\1\101\2\60\1\0"+
    "\1\60\4\0\2\60\3\0\1\102\45\0\1\103\17\0"+
    "\1\104\37\0\1\105\42\0\1\106\5\0\3\107\1\0"+
    "\22\107\1\0\1\107\4\0\2\107\2\0\1\110\2\107"+
    "\1\0\22\107\1\0\1\107\4\0\2\107\2\0\1\107"+
    "\1\111\1\107\1\0\22\107\1\0\1\107\4\0\2\107"+
    "\2\0\1\112\2\107\1\0\22\107\1\0\1\107\4\0"+
    "\2\107\2\0\1\113\2\107\1\0\22\107\1\0\1\107"+
    "\4\0\2\107\2\0\3\107\1\0\1\107\1\114\20\107"+
    "\1\0\1\107\4\0\2\107\2\0\3\107\1\0\12\107"+
    "\1\115\7\107\1\0\1\107\4\0\2\107\2\0\1\116"+
    "\2\107\1\0\22\107\1\0\1\107\4\0\2\107\2\0"+
    "\3\107\1\0\1\117\21\107\1\0\1\107\4\0\2\107"+
    "\2\0\3\107\1\0\14\107\1\120\5\107\1\0\1\107"+
    "\4\0\2\107\2\0\3\107\1\0\1\107\1\121\20\107"+
    "\1\0\1\107\4\0\2\107\2\0\3\107\1\0\11\107"+
    "\1\122\10\107\1\0\1\107\4\0\2\107\2\0\3\107"+
    "\1\0\6\107\1\123\13\107\1\0\1\107\4\0\2\107"+
    "\2\0\1\124\2\107\1\0\22\107\1\0\1\107\4\0"+
    "\2\107\2\0\3\107\1\0\3\107\1\125\16\107\1\0"+
    "\1\107\4\0\2\107\2\0\1\126\2\107\1\0\1\127"+
    "\21\107\1\0\1\107\4\0\2\107\2\0\1\130\2\107"+
    "\1\0\22\107\1\0\1\107\4\0\2\107\2\0\3\107"+
    "\1\0\16\107\1\131\3\107\1\0\1\107\4\0\2\107"+
    "\16\0\1\132\40\0\1\133\34\0\1\134\46\0\1\135"+
    "\47\0\1\136\6\0\3\137\1\0\22\137\1\0\1\137"+
    "\4\0\2\137\2\0\3\137\1\140\22\137\1\0\1\137"+
    "\4\0\2\137\2\0\3\137\1\0\3\137\1\141\16\137"+
    "\1\0\1\137\4\0\2\137\2\0\1\137\1\142\1\137"+
    "\1\0\22\137\1\0\1\137\4\0\2\137\2\0\3\137"+
    "\1\0\22\137\1\0\1\143\4\0\2\137\2\0\1\137"+
    "\1\144\1\137\1\0\22\137\1\0\1\137\4\0\2\137"+
    "\2\0\3\137\1\0\17\137\1\145\2\137\1\0\1\137"+
    "\4\0\2\137\2\0\1\137\1\146\1\137\1\0\22\137"+
    "\1\0\1\137\4\0\2\137\2\0\3\137\1\0\14\137"+
    "\1\147\1\137\1\150\3\137\1\0\1\137\4\0\2\137"+
    "\2\0\3\137\1\0\10\137\1\151\11\137\1\0\1\137"+
    "\4\0\2\137\2\0\3\137\1\0\22\137\1\0\1\152"+
    "\4\0\2\137\2\0\3\137\1\0\3\137\1\153\16\137"+
    "\1\0\1\137\4\0\2\137\16\0\1\154\43\0\1\155"+
    "\24\0\1\156\32\0\3\157\1\0\22\157\1\0\1\157"+
    "\4\0\2\157\6\0\1\160\33\0\3\157\1\0\2\157"+
    "\1\161\17\157\1\0\1\157\4\0\2\157\2\0\3\157"+
    "\1\0\5\157\1\162\14\157\1\0\1\157\4\0\2\157"+
    "\2\0\1\157\1\163\1\157\1\0\17\157\1\164\2\157"+
    "\1\0\1\157\4\0\2\157\2\0\3\157\1\0\1\157"+
    "\1\165\20\157\1\0\1\157\4\0\2\157\2\0\3\157"+
    "\1\0\20\157\1\166\1\157\1\0\1\157\4\0\2\157"+
    "\2\0\3\157\1\0\5\157\1\167\14\157\1\0\1\157"+
    "\4\0\2\157\2\0\1\170\2\157\1\0\22\157\1\0"+
    "\1\157\4\0\2\157\2\0\3\157\1\171\22\157\1\0"+
    "\1\157\4\0\2\157\2\0\3\157\1\0\15\157\1\172"+
    "\4\157\1\0\1\157\4\0\2\157\2\0\1\157\1\173"+
    "\1\157\1\0\17\157\1\174\2\157\1\0\1\157\4\0"+
    "\2\157\2\0\3\157\1\0\10\157\1\175\11\157\1\0"+
    "\1\157\4\0\2\157\2\0\1\176\52\0\1\177\24\0"+
    "\3\200\1\0\22\200\1\0\1\200\4\0\2\200\7\0"+
    "\1\201\32\0\1\200\1\202\1\200\1\0\22\200\1\0"+
    "\1\200\4\0\2\200\2\0\3\200\1\203\22\200\1\0"+
    "\1\200\4\0\2\200\2\0\3\200\1\0\3\200\1\204"+
    "\16\200\1\0\1\200\4\0\2\200\2\0\1\200\1\205"+
    "\1\200\1\0\22\200\1\0\1\200\4\0\2\200\2\0"+
    "\1\206\2\200\1\0\22\200\1\0\1\200\4\0\2\200"+
    "\2\0\3\200\1\207\22\200\1\0\1\200\4\0\2\200"+
    "\7\0\1\210\2\0\1\211\27\0\3\200\1\0\20\200"+
    "\1\212\1\200\1\0\1\200\4\0\2\200\2\0\3\200"+
    "\1\0\3\200\1\213\16\200\1\0\1\200\4\0\2\200"+
    "\2\0\1\200\1\214\1\200\1\0\22\200\1\0\1\200"+
    "\4\0\2\200\2\0\3\200\1\215\22\200\1\0\1\200"+
    "\4\0\2\200\3\0\1\216\36\0\3\217\1\0\22\217"+
    "\1\0\1\217\4\0\2\217\10\0\1\220\36\0\1\221"+
    "\32\0\3\217\1\0\1\217\1\222\20\217\1\0\1\217"+
    "\4\0\2\217\2\0\3\217\1\0\1\217\1\223\20\217"+
    "\1\0\1\217\4\0\2\217\2\0\3\217\1\224\22\217"+
    "\1\0\1\217\4\0\2\217\23\0\1\225\36\0\1\226"+
    "\26\0\1\227\30\0\3\217\1\0\1\217\1\230\20\217"+
    "\1\0\1\217\4\0\2\217\2\0\3\217\1\0\1\217"+
    "\1\231\20\217\1\0\1\217\4\0\2\217\23\0\1\232"+
    "\27\0\1\233\26\0\3\234\1\0\22\234\1\0\1\234"+
    "\4\0\2\234\2\0\1\235\37\0\1\236\2\234\1\0"+
    "\22\234\1\0\1\234\4\0\2\234\2\0\1\237\2\234"+
    "\1\0\22\234\1\0\1\234\4\0\2\234\23\0\1\240"+
    "\40\0\1\241\42\0\1\242\33\0\1\243\16\0\1\244"+
    "\2\234\1\0\22\234\1\0\1\234\4\0\2\234\2\0"+
    "\1\245\2\234\1\0\22\234\1\0\1\234\4\0\2\234"+
    "\24\0\1\246\15\0\3\247\1\0\22\247\1\0\1\247"+
    "\4\0\2\247\11\0\1\250\52\0\1\251\30\0\1\252"+
    "\51\0\1\253\26\0\1\254\36\0\1\255\24\0\3\256"+
    "\1\0\22\256\1\0\1\256\4\0\2\256\2\0\1\257"+
    "\52\0\1\260\44\0\1\261\20\0\1\262\37\0\1\263"+
    "\56\0\1\264\17\0\3\265\1\0\22\265\1\0\1\265"+
    "\4\0\2\265\22\0\1\266\37\0\1\267\17\0\1\270"+
    "\44\0\1\271\56\0\1\272\13\0\1\273\37\0\3\274"+
    "\1\0\22\274\1\0\1\274\4\0\2\274\7\0\1\275"+
    "\32\0\1\276\44\0\1\277\32\0\3\300\1\0\22\300"+
    "\1\0\1\300\4\0\2\300\2\0\3\301\1\0\22\301"+
    "\1\0\1\301\4\0\2\301\2\0\3\302\1\0\22\302"+
    "\1\0\1\302\4\0\2\302\2\0\3\303\1\0\22\303"+
    "\1\0\1\303\4\0\2\303\2\0\3\304\1\0\22\304"+
    "\1\0\1\304\4\0\2\304\2\0\3\305\1\0\22\305"+
    "\1\0\1\305\4\0\2\305\2\0\3\306\1\0\22\306"+
    "\1\0\1\306\4\0\2\306\2\0\3\307\1\0\22\307"+
    "\1\0\1\307\4\0\2\307\2\0\3\310\1\0\22\310"+
    "\1\0\1\310\4\0\2\310\2\0\3\311\1\0\22\311"+
    "\1\0\1\311\4\0\2\311\2\0\3\312\1\0\22\312"+
    "\1\0\1\312\4\0\2\312\2\0\3\313\1\0\22\313"+
    "\1\0\1\313\4\0\2\313\2\0\3\314\1\0\22\314"+
    "\1\0\1\314\4\0\2\314\2\0\3\315\1\0\22\315"+
    "\1\0\1\315\4\0\2\315\2\0\3\316\1\0\22\316"+
    "\1\0\1\316\4\0\2\316\2\0\3\317\1\0\22\317"+
    "\1\0\1\317\4\0\2\317\2\0\3\320\1\0\22\320"+
    "\1\0\1\320\4\0\2\320\2\0\3\321\1\0\22\321"+
    "\1\0\1\321\4\0\2\321\2\0\3\322\1\0\22\322"+
    "\1\0\1\322\4\0\2\322\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5696];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\20\0\1\11\2\0\1\1\1\11\24\1\4\0"+
    "\1\11\22\1\5\0\23\1\1\0\1\11\2\0\1\11"+
    "\1\1\1\0\13\1\1\11\2\0\1\1\1\0\10\1"+
    "\1\0\4\1\1\11\1\0\1\1\1\0\1\1\1\0"+
    "\3\1\3\0\3\1\2\0\1\1\1\11\1\0\2\1"+
    "\4\0\2\1\1\0\1\11\1\1\1\0\2\1\4\0"+
    "\2\1\1\0\1\1\6\0\1\1\6\0\1\1\2\0"+
    "\1\11\1\0\2\11\1\1\3\11\22\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/* store a reference to the parser object */
	private MessageParser yyparser;

	/* constructor taking an additional parser */
	public MessageScanner (java.io.Reader r, MessageParser yyparser) {
		this (r);	
		this.yyparser = yyparser;
	}

	/* return the current line number. We need this
	   because yyline is made private and we don't have
	   a mechanism like extern in C. */
	public int getLine() {
		return yyline;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MessageScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MessageScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 108) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.STRINGLITERAL;
          }
        case 38: break;
        case 29: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_SOUTHWEST;
          }
        case 39: break;
        case 30: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_NORTHEAST;
          }
        case 40: break;
        case 20: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.SERVER;
          }
        case 41: break;
        case 9: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.EXIT;
          }
        case 42: break;
        case 5: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.TO;
          }
        case 43: break;
        case 26: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.TEXTMSG;
          }
        case 44: break;
        case 28: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_SOUTHEAST;
          }
        case 45: break;
        case 27: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.WHISPER;
          }
        case 46: break;
        case 6: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_UP;
          }
        case 47: break;
        case 25: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.INVALID;
          }
        case 48: break;
        case 3: 
          { ;
          }
        case 49: break;
        case 14: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_DOWN;
          }
        case 50: break;
        case 17: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_SOUTH;
          }
        case 51: break;
        case 4: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.CHARNAME;
          }
        case 52: break;
        case 33: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.LOGON_FAILED;
          }
        case 53: break;
        case 19: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.TELL;
          }
        case 54: break;
        case 36: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.REQUEST_INPUT;
          }
        case 55: break;
        case 8: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.TYPE;
          }
        case 56: break;
        case 24: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.MESSAGE;
          }
        case 57: break;
        case 18: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_NORTH;
          }
        case 58: break;
        case 13: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_WEST;
          }
        case 59: break;
        case 23: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.SHOUT;
          }
        case 60: break;
        case 21: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.PLAYER;
          }
        case 61: break;
        case 12: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.QUIT;
          }
        case 62: break;
        case 34: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.NORMAL_INPUT;
          }
        case 63: break;
        case 31: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_NORTHWEST;
          }
        case 64: break;
        case 16: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.CHARLITERAL;
          }
        case 65: break;
        case 35: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.SERVER_STATUS;
          }
        case 66: break;
        case 10: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_EAST;
          }
        case 67: break;
        case 22: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.LOGOUT;
          }
        case 68: break;
        case 32: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.PASSWD_INPUT;
          }
        case 69: break;
        case 15: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.SAY;
          }
        case 70: break;
        case 1: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.INT;
          }
        case 71: break;
        case 37: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.LOGON_SUCCESS;
          }
        case 72: break;
        case 2: 
          { return (int)yycharat(0);
          }
        case 73: break;
        case 11: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.FROM;
          }
        case 74: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
