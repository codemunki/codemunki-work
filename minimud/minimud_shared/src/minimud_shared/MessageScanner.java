/* The following code was generated by JFlex 1.4.1 on 11/10/13 10:09 AM */

package minimud_shared;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 11/10/13 10:09 AM from the specification file
 * <tt>./minimud_shared/MessageScanner.jflex</tt>
 */
class MessageScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\43\1\42\2\0\1\42\22\0\1\43\1\36\1\37\4\36"+
    "\1\35\1\33\1\33\2\36\1\33\2\36\1\27\12\41\1\33\2\36"+
    "\1\34\3\36\32\40\1\36\1\0\2\36\1\4\1\0\1\10\1\32"+
    "\1\26\1\25\1\2\1\11\1\7\1\30\1\22\1\40\1\31\1\15"+
    "\1\5\1\23\1\13\1\14\1\20\1\12\1\6\1\1\1\21\1\17"+
    "\1\24\1\3\1\16\1\40\1\36\1\0\2\36\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\24\0\1\2\2\0\1\1\1\3\3\4\1\5"+
    "\3\4\1\6\7\4\1\7\10\4\1\10\5\4\3\0"+
    "\1\4\1\11\1\12\35\4\4\0\3\4\1\13\1\14"+
    "\1\15\1\16\1\17\1\4\1\20\4\4\1\21\1\22"+
    "\3\4\1\23\3\4\1\24\1\25\3\4\1\26\1\27"+
    "\1\30\1\0\1\31\1\0\1\32\1\0\1\33\1\4"+
    "\1\0\2\4\1\34\1\35\1\36\3\4\1\37\4\4"+
    "\1\40\1\4\1\41\2\0\1\4\1\0\1\4\1\42"+
    "\4\4\1\43\1\4\1\44\1\0\4\4\1\45\1\0"+
    "\1\4\1\0\1\46\1\0\3\4\1\0\1\47\2\0"+
    "\1\50\2\4\2\0\1\4\1\51\1\0\2\4\4\0"+
    "\2\4\1\0\1\52\1\4\1\0\1\53\1\54\4\0"+
    "\1\55\1\56\1\0\1\4\6\0\1\4\6\0\1\4"+
    "\2\0\1\57\1\0\1\60\1\61\1\4\1\62\1\63"+
    "\1\64\23\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\u033c"+
    "\0\u0360\0\u02f4\0\u0384\0\u03a8\0\u03cc\0\u0384\0\u03f0\0\u0414"+
    "\0\u0438\0\u0384\0\u045c\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510"+
    "\0\u0534\0\u0384\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u05e8\0\u060c"+
    "\0\u0630\0\u0654\0\u0384\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708"+
    "\0\u072c\0\u0750\0\u0774\0\u0798\0\u02f4\0\u02f4\0\u07bc\0\u07e0"+
    "\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894\0\u08b8\0\u08dc\0\u0900"+
    "\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8\0\u09fc\0\u0a20"+
    "\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4\0\u0af8\0\u0b1c\0\u0b40"+
    "\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4\0\u0c18\0\u0c3c\0\u0c60"+
    "\0\u0c84\0\u0ca8\0\u0c84\0\u0c84\0\u0c84\0\u0c84\0\u0c84\0\u0ccc"+
    "\0\u0c84\0\u0cf0\0\u0d14\0\u0d38\0\u0d5c\0\u0c84\0\u0c84\0\u0d80"+
    "\0\u0da4\0\u0dc8\0\u0c84\0\u0dec\0\u0e10\0\u0e34\0\u0c84\0\u0c84"+
    "\0\u0e58\0\u0e7c\0\u0ea0\0\u0c84\0\u0c84\0\u0c84\0\u0ec4\0\u02f4"+
    "\0\u0ee8\0\u02f4\0\u0f0c\0\u0c84\0\u0f30\0\u0f54\0\u0f78\0\u0f9c"+
    "\0\u0fc0\0\u0f30\0\u0f30\0\u0fe4\0\u1008\0\u102c\0\u0f30\0\u1050"+
    "\0\u1074\0\u1098\0\u10bc\0\u10e0\0\u1104\0\u02f4\0\u1128\0\u114c"+
    "\0\u1170\0\u1194\0\u11b8\0\u11dc\0\u1200\0\u1224\0\u1248\0\u126c"+
    "\0\u1170\0\u1290\0\u1170\0\u12b4\0\u12d8\0\u12fc\0\u1320\0\u1344"+
    "\0\u02f4\0\u1368\0\u138c\0\u13b0\0\u138c\0\u13d4\0\u13f8\0\u141c"+
    "\0\u1440\0\u1464\0\u138c\0\u1488\0\u14ac\0\u138c\0\u14d0\0\u14f4"+
    "\0\u1518\0\u153c\0\u1560\0\u02f4\0\u1584\0\u15a8\0\u15cc\0\u15f0"+
    "\0\u1614\0\u1638\0\u165c\0\u1680\0\u16a4\0\u16c8\0\u02f4\0\u16ec"+
    "\0\u1710\0\u16ec\0\u16ec\0\u1734\0\u1758\0\u177c\0\u17a0\0\u16ec"+
    "\0\u16ec\0\u17c4\0\u17e8\0\u180c\0\u1830\0\u1854\0\u1878\0\u189c"+
    "\0\u18c0\0\u18e4\0\u1908\0\u192c\0\u1950\0\u1974\0\u1998\0\u19bc"+
    "\0\u19e0\0\u1a04\0\u1a28\0\u02f4\0\u1a4c\0\u02f4\0\u02f4\0\u1a70"+
    "\0\u02f4\0\u02f4\0\u02f4\0\u1a94\0\u1ab8\0\u1adc\0\u1b00\0\u1b24"+
    "\0\u1b48\0\u1b6c\0\u1b90\0\u1bb4\0\u1bd8\0\u1bfc\0\u1c20\0\u1c44"+
    "\0\u1c68\0\u1c8c\0\u1cb0\0\u1cd4\0\u1cf8\0\u02f4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\0\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\2\13\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\13\1\24\1\13"+
    "\1\25\1\13\2\26\1\27\1\0\1\30\1\13\1\31"+
    "\2\32\1\0\1\33\1\34\1\33\1\0\3\33\1\35"+
    "\2\33\1\36\2\33\1\37\10\33\1\0\3\33\5\0"+
    "\2\33\3\0\2\33\1\40\1\0\3\33\1\41\16\33"+
    "\1\0\3\33\5\0\2\33\3\0\3\33\1\0\7\33"+
    "\1\42\12\33\1\0\3\33\5\0\2\33\3\0\1\33"+
    "\1\43\1\33\1\0\22\33\1\0\3\33\5\0\2\33"+
    "\3\0\1\44\1\45\1\33\1\0\6\33\1\46\1\33"+
    "\1\47\11\33\1\0\1\50\2\33\5\0\2\33\3\0"+
    "\3\33\1\0\6\33\1\51\13\33\1\0\3\33\5\0"+
    "\2\33\3\0\1\52\2\33\1\0\22\33\1\0\3\33"+
    "\5\0\2\33\3\0\3\33\1\0\5\33\1\53\14\33"+
    "\1\0\3\33\5\0\2\33\3\0\1\33\1\54\1\33"+
    "\1\0\22\33\1\0\3\33\5\0\2\33\3\0\3\33"+
    "\1\0\22\33\1\0\3\33\5\0\2\33\3\0\3\33"+
    "\1\0\3\33\1\55\4\33\1\56\3\33\1\57\5\33"+
    "\1\0\3\33\5\0\2\33\3\0\1\33\1\60\1\33"+
    "\1\0\6\33\1\61\13\33\1\0\3\33\5\0\2\33"+
    "\3\0\3\33\1\0\14\33\1\62\5\33\1\0\3\33"+
    "\5\0\2\33\3\0\3\33\1\0\7\33\1\63\12\33"+
    "\1\0\3\33\5\0\2\33\3\0\3\33\1\0\16\33"+
    "\1\64\3\33\1\0\3\33\5\0\2\33\3\0\3\33"+
    "\1\0\6\33\1\65\13\33\1\0\3\33\5\0\2\33"+
    "\3\0\1\33\1\66\1\33\1\0\22\33\1\0\3\33"+
    "\5\0\2\33\3\0\3\33\1\0\5\33\1\67\1\70"+
    "\13\33\1\0\3\33\5\0\2\33\3\0\1\71\4\0"+
    "\1\72\15\0\1\73\20\0\3\33\1\0\15\33\1\74"+
    "\4\33\1\0\3\33\5\0\2\33\47\0\33\27\1\0"+
    "\1\75\4\27\1\0\1\27\1\0\33\30\1\0\2\30"+
    "\1\76\2\30\1\0\1\30\41\0\1\31\3\0\3\77"+
    "\1\0\22\77\1\0\3\77\5\0\2\77\3\0\2\77"+
    "\1\100\1\0\22\77\1\0\3\77\5\0\2\77\3\0"+
    "\3\77\1\0\10\77\1\101\11\77\1\0\1\77\1\102"+
    "\1\77\5\0\2\77\3\0\3\77\1\0\7\77\1\103"+
    "\12\77\1\0\3\77\5\0\2\77\3\0\3\77\1\0"+
    "\15\77\1\104\4\77\1\0\3\77\5\0\2\77\3\0"+
    "\3\77\1\0\1\77\1\105\20\77\1\0\3\77\5\0"+
    "\2\77\3\0\3\77\1\0\1\77\1\106\20\77\1\0"+
    "\3\77\5\0\2\77\3\0\3\77\1\0\3\77\1\107"+
    "\16\77\1\0\3\77\5\0\2\77\3\0\3\77\1\0"+
    "\5\77\1\110\14\77\1\0\3\77\5\0\2\77\3\0"+
    "\3\77\1\0\14\77\1\111\5\77\1\0\3\77\5\0"+
    "\2\77\3\0\3\77\1\0\3\77\1\112\16\77\1\0"+
    "\3\77\5\0\2\77\3\0\3\77\1\0\6\77\1\113"+
    "\13\77\1\0\3\77\5\0\2\77\3\0\3\77\1\0"+
    "\10\77\1\114\11\77\1\0\3\77\5\0\2\77\3\0"+
    "\3\77\1\0\6\77\1\115\13\77\1\0\3\77\5\0"+
    "\2\77\3\0\3\77\1\0\13\77\1\116\6\77\1\0"+
    "\3\77\5\0\2\77\3\0\3\77\1\0\1\77\1\117"+
    "\20\77\1\0\3\77\5\0\2\77\3\0\3\77\1\0"+
    "\3\77\1\120\16\77\1\0\3\77\5\0\2\77\3\0"+
    "\3\77\1\0\1\77\1\121\14\77\1\122\3\77\1\0"+
    "\3\77\5\0\2\77\3\0\3\77\1\0\3\77\1\123"+
    "\16\77\1\0\3\77\5\0\2\77\3\0\3\77\1\0"+
    "\2\77\1\124\3\77\1\125\13\77\1\0\3\77\5\0"+
    "\2\77\3\0\3\77\1\0\15\77\1\126\4\77\1\0"+
    "\3\77\5\0\2\77\3\0\3\77\1\0\12\77\1\127"+
    "\7\77\1\0\3\77\5\0\2\77\3\0\3\77\1\0"+
    "\5\77\1\130\14\77\1\0\3\77\5\0\2\77\3\0"+
    "\3\77\1\0\1\77\1\131\20\77\1\0\3\77\5\0"+
    "\2\77\3\0\3\77\1\0\6\77\1\132\13\77\1\0"+
    "\3\77\5\0\2\77\3\0\3\77\1\0\17\77\1\133"+
    "\2\77\1\0\3\77\5\0\2\77\4\0\1\134\51\0"+
    "\1\135\17\0\1\136\43\0\1\137\14\0\3\77\1\0"+
    "\21\77\1\140\1\0\3\77\5\0\2\77\3\0\3\141"+
    "\1\0\22\141\1\0\3\141\5\0\2\141\3\0\1\142"+
    "\2\141\1\0\22\141\1\0\3\141\5\0\2\141\3\0"+
    "\3\141\1\0\22\141\1\0\1\141\1\143\1\141\5\0"+
    "\2\141\3\0\1\141\1\144\1\141\1\0\22\141\1\0"+
    "\3\141\5\0\2\141\3\0\1\141\1\145\1\141\1\0"+
    "\22\141\1\0\3\141\5\0\2\141\3\0\1\146\2\141"+
    "\1\0\22\141\1\0\3\141\5\0\2\141\3\0\1\147"+
    "\2\141\1\0\22\141\1\0\3\141\5\0\2\141\3\0"+
    "\3\141\1\0\1\141\1\150\20\141\1\0\3\141\5\0"+
    "\2\141\3\0\3\141\1\0\22\141\1\0\2\141\1\151"+
    "\5\0\2\141\3\0\3\141\1\0\12\141\1\152\7\141"+
    "\1\0\3\141\5\0\2\141\3\0\1\153\2\141\1\0"+
    "\22\141\1\0\3\141\5\0\2\141\3\0\3\141\1\0"+
    "\1\141\1\154\20\141\1\0\3\141\5\0\2\141\3\0"+
    "\3\141\1\0\6\141\1\155\13\141\1\0\3\141\5\0"+
    "\2\141\3\0\3\141\1\0\20\141\1\156\1\141\1\0"+
    "\3\141\5\0\2\141\3\0\3\141\1\0\1\157\21\141"+
    "\1\0\3\141\5\0\2\141\3\0\3\141\1\0\14\141"+
    "\1\160\5\141\1\0\3\141\5\0\2\141\3\0\3\141"+
    "\1\0\1\141\1\161\20\141\1\0\3\141\5\0\2\141"+
    "\3\0\3\141\1\0\11\141\1\162\10\141\1\0\3\141"+
    "\5\0\2\141\3\0\3\141\1\0\22\141\1\0\1\163"+
    "\2\141\5\0\2\141\3\0\3\141\1\0\21\141\1\164"+
    "\1\0\3\141\5\0\2\141\3\0\3\141\1\0\20\141"+
    "\1\165\1\141\1\0\3\141\5\0\2\141\3\0\3\141"+
    "\1\0\6\141\1\166\13\141\1\0\3\141\5\0\2\141"+
    "\3\0\3\141\1\0\22\141\1\0\1\141\1\167\1\141"+
    "\5\0\2\141\3\0\1\170\2\141\1\0\22\141\1\0"+
    "\3\141\5\0\2\141\3\0\3\141\1\0\3\141\1\171"+
    "\16\141\1\0\3\141\5\0\2\141\3\0\1\172\2\141"+
    "\1\0\1\173\21\141\1\0\3\141\5\0\2\141\3\0"+
    "\1\174\2\141\1\0\22\141\1\0\3\141\5\0\2\141"+
    "\3\0\3\141\1\0\7\141\1\175\12\141\1\0\3\141"+
    "\5\0\2\141\3\0\3\141\1\0\16\141\1\176\3\141"+
    "\1\0\3\141\5\0\2\141\17\0\1\177\44\0\1\200"+
    "\40\0\1\201\43\0\1\202\6\0\1\203\22\0\3\141"+
    "\1\0\22\141\1\0\1\141\1\204\1\141\5\0\2\141"+
    "\3\0\3\205\1\0\22\205\1\0\3\205\5\0\2\205"+
    "\3\0\3\205\1\206\22\205\1\0\3\205\5\0\2\205"+
    "\3\0\3\205\1\0\3\205\1\207\16\205\1\0\3\205"+
    "\5\0\2\205\3\0\1\205\1\210\1\205\1\0\22\205"+
    "\1\0\3\205\5\0\2\205\3\0\3\205\1\0\22\205"+
    "\1\0\1\211\2\205\5\0\2\205\3\0\3\205\1\0"+
    "\22\205\1\0\1\212\2\205\5\0\2\205\3\0\1\213"+
    "\2\205\1\0\22\205\1\0\3\205\5\0\2\205\3\0"+
    "\1\205\1\214\1\205\1\0\22\205\1\0\3\205\5\0"+
    "\2\205\3\0\3\205\1\0\17\205\1\215\2\205\1\0"+
    "\3\205\5\0\2\205\3\0\1\205\1\216\1\205\1\0"+
    "\22\205\1\0\3\205\5\0\2\205\3\0\3\205\1\0"+
    "\22\205\1\0\1\217\2\205\5\0\2\205\3\0\1\205"+
    "\1\220\1\205\1\0\22\205\1\0\3\205\5\0\2\205"+
    "\3\0\3\205\1\0\14\205\1\221\1\205\1\222\3\205"+
    "\1\0\3\205\5\0\2\205\3\0\3\205\1\0\10\205"+
    "\1\223\11\205\1\0\3\205\5\0\2\205\3\0\3\205"+
    "\1\0\22\205\1\0\1\224\2\205\5\0\2\205\3\0"+
    "\3\205\1\0\3\205\1\225\16\205\1\0\3\205\5\0"+
    "\2\205\17\0\1\226\47\0\1\227\30\0\1\230\36\0"+
    "\3\231\1\0\22\231\1\0\3\231\5\0\2\231\7\0"+
    "\1\232\37\0\3\231\1\0\2\231\1\233\17\231\1\0"+
    "\3\231\5\0\2\231\3\0\3\231\1\0\5\231\1\234"+
    "\14\231\1\0\3\231\5\0\2\231\3\0\1\231\1\235"+
    "\1\231\1\0\17\231\1\236\2\231\1\0\3\231\5\0"+
    "\2\231\3\0\3\231\1\0\1\231\1\237\20\231\1\0"+
    "\3\231\5\0\2\231\3\0\3\231\1\0\20\231\1\240"+
    "\1\231\1\0\3\231\5\0\2\231\3\0\3\231\1\0"+
    "\5\231\1\241\14\231\1\0\3\231\5\0\2\231\3\0"+
    "\3\231\1\0\5\231\1\242\14\231\1\0\3\231\5\0"+
    "\2\231\3\0\1\243\2\231\1\0\22\231\1\0\3\231"+
    "\5\0\2\231\3\0\3\231\1\244\22\231\1\0\3\231"+
    "\5\0\2\231\3\0\3\231\1\0\15\231\1\245\4\231"+
    "\1\0\3\231\5\0\2\231\3\0\1\231\1\246\1\231"+
    "\1\0\17\231\1\247\2\231\1\0\3\231\5\0\2\231"+
    "\3\0\3\231\1\0\10\231\1\250\11\231\1\0\3\231"+
    "\5\0\2\231\3\0\1\251\56\0\1\252\30\0\3\253"+
    "\1\0\22\253\1\0\3\253\5\0\2\253\10\0\1\254"+
    "\36\0\1\253\1\255\1\253\1\0\22\253\1\0\3\253"+
    "\5\0\2\253\3\0\3\253\1\256\22\253\1\0\3\253"+
    "\5\0\2\253\3\0\3\253\1\0\3\253\1\257\16\253"+
    "\1\0\3\253\5\0\2\253\3\0\1\253\1\260\1\253"+
    "\1\0\22\253\1\0\3\253\5\0\2\253\3\0\1\261"+
    "\2\253\1\0\22\253\1\0\3\253\5\0\2\253\3\0"+
    "\3\253\1\262\22\253\1\0\3\253\5\0\2\253\3\0"+
    "\3\253\1\0\1\253\1\263\20\253\1\0\3\253\5\0"+
    "\2\253\10\0\1\264\2\0\1\265\33\0\3\253\1\0"+
    "\20\253\1\266\1\253\1\0\3\253\5\0\2\253\3\0"+
    "\3\253\1\0\3\253\1\267\16\253\1\0\3\253\5\0"+
    "\2\253\3\0\1\253\1\270\1\253\1\0\22\253\1\0"+
    "\3\253\5\0\2\253\3\0\3\253\1\271\22\253\1\0"+
    "\3\253\5\0\2\253\4\0\1\272\42\0\3\273\1\0"+
    "\22\273\1\0\3\273\5\0\2\273\11\0\1\274\42\0"+
    "\1\275\36\0\3\273\1\0\1\273\1\276\20\273\1\0"+
    "\3\273\5\0\2\273\3\0\3\273\1\0\1\273\1\277"+
    "\20\273\1\0\3\273\5\0\2\273\3\0\3\273\1\300"+
    "\22\273\1\0\3\273\5\0\2\273\24\0\1\301\42\0"+
    "\1\302\32\0\1\303\34\0\3\273\1\0\1\273\1\304"+
    "\20\273\1\0\3\273\5\0\2\273\3\0\3\273\1\0"+
    "\1\273\1\305\20\273\1\0\3\273\5\0\2\273\24\0"+
    "\1\306\33\0\1\307\32\0\3\310\1\0\22\310\1\0"+
    "\3\310\5\0\2\310\3\0\1\311\43\0\1\312\2\310"+
    "\1\0\22\310\1\0\3\310\5\0\2\310\3\0\1\313"+
    "\2\310\1\0\22\310\1\0\3\310\5\0\2\310\24\0"+
    "\1\314\44\0\1\315\46\0\1\316\37\0\1\317\22\0"+
    "\1\320\2\310\1\0\22\310\1\0\3\310\5\0\2\310"+
    "\3\0\1\321\2\310\1\0\22\310\1\0\3\310\5\0"+
    "\2\310\25\0\1\322\21\0\3\323\1\0\22\323\1\0"+
    "\3\323\5\0\2\323\12\0\1\324\56\0\1\325\34\0"+
    "\1\326\55\0\1\327\32\0\1\330\42\0\1\331\30\0"+
    "\3\332\1\0\22\332\1\0\3\332\5\0\2\332\3\0"+
    "\1\333\56\0\1\334\50\0\1\335\24\0\1\336\43\0"+
    "\1\337\62\0\1\340\23\0\3\341\1\0\22\341\1\0"+
    "\3\341\5\0\2\341\23\0\1\342\43\0\1\343\23\0"+
    "\1\344\50\0\1\345\62\0\1\346\17\0\1\347\43\0"+
    "\3\350\1\0\22\350\1\0\3\350\5\0\2\350\10\0"+
    "\1\351\36\0\1\352\50\0\1\353\36\0\3\354\1\0"+
    "\22\354\1\0\3\354\5\0\2\354\3\0\3\355\1\0"+
    "\22\355\1\0\3\355\5\0\2\355\3\0\3\356\1\0"+
    "\22\356\1\0\3\356\5\0\2\356\3\0\3\357\1\0"+
    "\22\357\1\0\3\357\5\0\2\357\3\0\3\360\1\0"+
    "\22\360\1\0\3\360\5\0\2\360\3\0\3\361\1\0"+
    "\22\361\1\0\3\361\5\0\2\361\3\0\3\362\1\0"+
    "\22\362\1\0\3\362\5\0\2\362\3\0\3\363\1\0"+
    "\22\363\1\0\3\363\5\0\2\363\3\0\3\364\1\0"+
    "\22\364\1\0\3\364\5\0\2\364\3\0\3\365\1\0"+
    "\22\365\1\0\3\365\5\0\2\365\3\0\3\366\1\0"+
    "\22\366\1\0\3\366\5\0\2\366\3\0\3\367\1\0"+
    "\22\367\1\0\3\367\5\0\2\367\3\0\3\370\1\0"+
    "\22\370\1\0\3\370\5\0\2\370\3\0\3\371\1\0"+
    "\22\371\1\0\3\371\5\0\2\371\3\0\3\372\1\0"+
    "\22\372\1\0\3\372\5\0\2\372\3\0\3\373\1\0"+
    "\22\373\1\0\3\373\5\0\2\373\3\0\3\374\1\0"+
    "\22\374\1\0\3\374\5\0\2\374\3\0\3\375\1\0"+
    "\22\375\1\0\3\375\5\0\2\375\3\0\3\376\1\0"+
    "\22\376\1\0\3\376\5\0\2\376\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7452];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\24\0\1\11\2\0\1\1\1\11\36\1\3\0"+
    "\1\1\2\11\35\1\4\0\37\1\1\0\1\11\1\0"+
    "\1\11\1\0\2\1\1\0\17\1\1\11\2\0\1\1"+
    "\1\0\11\1\1\0\4\1\1\11\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\2\0\3\1\2\0"+
    "\1\1\1\11\1\0\2\1\4\0\2\1\1\0\1\11"+
    "\1\1\1\0\2\1\4\0\2\1\1\0\1\1\6\0"+
    "\1\1\6\0\1\1\2\0\1\11\1\0\2\11\1\1"+
    "\3\11\22\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/* store a reference to the parser object */
	private MessageParser yyparser;

	/* constructor taking an additional parser */
	public MessageScanner (java.io.Reader r, MessageParser yyparser) {
		this (r);	
		this.yyparser = yyparser;
	}

	/* return the current line number. We need this
	   because yyline is made private and we don't have
	   a mechanism like extern in C. */
	public int getLine() {
		return yyline;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MessageScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MessageScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 116) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 44: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_SOUTHWEST;
          }
        case 53: break;
        case 10: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.STRINGLITERAL;
          }
        case 54: break;
        case 26: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.WHO;
          }
        case 55: break;
        case 45: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_NORTHEAST;
          }
        case 56: break;
        case 31: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.PUNCH;
          }
        case 57: break;
        case 39: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.LEADERS;
          }
        case 58: break;
        case 34: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.SERVER;
          }
        case 59: break;
        case 14: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.EXIT;
          }
        case 60: break;
        case 5: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.TO;
          }
        case 61: break;
        case 11: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.TALK;
          }
        case 62: break;
        case 12: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.TAKE;
          }
        case 63: break;
        case 30: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.SHOOT;
          }
        case 64: break;
        case 41: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.TEXTMSG;
          }
        case 65: break;
        case 43: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_SOUTHEAST;
          }
        case 66: break;
        case 42: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.WHISPER;
          }
        case 67: break;
        case 40: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.INVALID;
          }
        case 68: break;
        case 8: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_UP;
          }
        case 69: break;
        case 3: 
          { ;
          }
        case 70: break;
        case 6: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.XP;
          }
        case 71: break;
        case 24: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_DOWN;
          }
        case 72: break;
        case 28: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_SOUTH;
          }
        case 73: break;
        case 4: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.CHARNAME;
          }
        case 74: break;
        case 16: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.STAB;
          }
        case 75: break;
        case 48: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.LOGON_FAILED;
          }
        case 76: break;
        case 33: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.TELL;
          }
        case 77: break;
        case 51: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.REQUEST_INPUT;
          }
        case 78: break;
        case 13: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.TYPE;
          }
        case 79: break;
        case 38: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.MESSAGE;
          }
        case 80: break;
        case 23: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.DROP;
          }
        case 81: break;
        case 32: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_NORTH;
          }
        case 82: break;
        case 22: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_WEST;
          }
        case 83: break;
        case 37: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.SHOUT;
          }
        case 84: break;
        case 35: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.PLAYER;
          }
        case 85: break;
        case 21: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.QUIT;
          }
        case 86: break;
        case 49: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.NORMAL_INPUT;
          }
        case 87: break;
        case 19: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.PUSH;
          }
        case 88: break;
        case 7: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.AT;
          }
        case 89: break;
        case 46: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_NORTHWEST;
          }
        case 90: break;
        case 20: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.LOOK;
          }
        case 91: break;
        case 17: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GOLD;
          }
        case 92: break;
        case 9: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.CHARLITERAL;
          }
        case 93: break;
        case 50: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.SERVER_STATUS;
          }
        case 94: break;
        case 15: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.GO_EAST;
          }
        case 95: break;
        case 36: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.LOGOUT;
          }
        case 96: break;
        case 29: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.SLASH;
          }
        case 97: break;
        case 47: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.PASSWD_INPUT;
          }
        case 98: break;
        case 25: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.SAY;
          }
        case 99: break;
        case 1: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.INT;
          }
        case 100: break;
        case 27: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.KICK;
          }
        case 101: break;
        case 52: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.LOGON_SUCCESS;
          }
        case 102: break;
        case 2: 
          { return (int)yycharat(0);
          }
        case 103: break;
        case 18: 
          { yyparser.yylval = new MessageParserVal(yytext()); return MessageParser.FROM;
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
