Grammar

    0 $accept: program $end

    1 $@1: /* empty */

    2 $@2: /* empty */

    3 program: $@1 decls $@2 code

    4 decls: decls decl
    5      | /* empty */

    6 decl: INT name_list

    7 name_list: name_list ',' ID
    8          | name_list ',' ID '[' INT_LITERAL ']'
    9          | ID
   10          | ID '[' INT_LITERAL ']'

   11 code: code opt_labels stmt
   12     | opt_labels stmt

   13 opt_labels: opt_labels LABEL
   14           | /* empty */

   15 stmt: assignment
   16     | branch
   17     | PUT simple_op
   18     | PUT ID '[' simple_op ']'
   19     | ID '=' GET

   20 branch: GOTO ID
   21       | IF simple_op LT simple_op GOTO ID
   22       | IF simple_op LE simple_op GOTO ID
   23       | IF simple_op GT simple_op GOTO ID
   24       | IF simple_op GE simple_op GOTO ID
   25       | IF simple_op NE simple_op GOTO ID
   26       | IF simple_op EQ simple_op GOTO ID

   27 assignment: ID '=' simple_op
   28           | ID '=' simple_op '+' simple_op
   29           | ID '=' simple_op '-' simple_op
   30           | ID '=' simple_op '*' simple_op
   31           | ID '=' simple_op '/' simple_op
   32           | ID '=' ID '[' simple_op ']'
   33           | ID '[' simple_op ']' '=' simple_op

   34 simple_op: ID
   35          | INT_LITERAL


Terminals, with rules where they appear

$end (0) 0
'*' (42) 30
'+' (43) 28
',' (44) 7 8
'-' (45) 29
'/' (47) 31
'=' (61) 19 27 28 29 30 31 32 33
'[' (91) 8 10 18 32 33
']' (93) 8 10 18 32 33
error (256)
INT (258) 6
IF (259) 21 22 23 24 25 26
GOTO (260) 20 21 22 23 24 25 26
PUT (261) 17 18
GET (262) 19
ID (263) 7 8 9 10 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
LABEL (264) 13
INT_LITERAL (265) 8 10 35
LT (266) 21
LE (267) 22
GT (268) 23
GE (269) 24
EQ (270) 26
NE (271) 25


Nonterminals, with rules where they appear

$accept (25)
    on left: 0
program (26)
    on left: 3, on right: 0
$@1 (27)
    on left: 1, on right: 3
$@2 (28)
    on left: 2, on right: 3
decls (29)
    on left: 4 5, on right: 3 4
decl (30)
    on left: 6, on right: 4
name_list (31)
    on left: 7 8 9 10, on right: 6 7 8
code (32)
    on left: 11 12, on right: 3 11
opt_labels (33)
    on left: 13 14, on right: 11 12 13
stmt (34)
    on left: 15 16 17 18 19, on right: 11 12
branch (35)
    on left: 20 21 22 23 24 25 26, on right: 16
assignment (36)
    on left: 27 28 29 30 31 32 33, on right: 15
simple_op (37)
    on left: 34 35, on right: 17 18 21 22 23 24 25 26 27 28 29 30 31
    32 33


state 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    3 program: $@1 . decls $@2 code

    $default  reduce using rule 5 (decls)

    decls  go to state 4


state 3

    0 $accept: program $end .

    $default  accept


state 4

    3 program: $@1 decls . $@2 code
    4 decls: decls . decl

    INT  shift, and go to state 5

    $default  reduce using rule 2 ($@2)

    $@2   go to state 6
    decl  go to state 7


state 5

    6 decl: INT . name_list

    ID  shift, and go to state 8

    name_list  go to state 9


state 6

    3 program: $@1 decls $@2 . code

    $default  reduce using rule 14 (opt_labels)

    code        go to state 10
    opt_labels  go to state 11


state 7

    4 decls: decls decl .

    $default  reduce using rule 4 (decls)


state 8

    9 name_list: ID .
   10          | ID . '[' INT_LITERAL ']'

    '['  shift, and go to state 12

    $default  reduce using rule 9 (name_list)


state 9

    6 decl: INT name_list .
    7 name_list: name_list . ',' ID
    8          | name_list . ',' ID '[' INT_LITERAL ']'

    ','  shift, and go to state 13

    $default  reduce using rule 6 (decl)


state 10

    3 program: $@1 decls $@2 code .
   11 code: code . opt_labels stmt

    $end      reduce using rule 3 (program)
    $default  reduce using rule 14 (opt_labels)

    opt_labels  go to state 14


state 11

   12 code: opt_labels . stmt
   13 opt_labels: opt_labels . LABEL

    IF     shift, and go to state 15
    GOTO   shift, and go to state 16
    PUT    shift, and go to state 17
    ID     shift, and go to state 18
    LABEL  shift, and go to state 19

    stmt        go to state 20
    branch      go to state 21
    assignment  go to state 22


state 12

   10 name_list: ID '[' . INT_LITERAL ']'

    INT_LITERAL  shift, and go to state 23


state 13

    7 name_list: name_list ',' . ID
    8          | name_list ',' . ID '[' INT_LITERAL ']'

    ID  shift, and go to state 24


state 14

   11 code: code opt_labels . stmt
   13 opt_labels: opt_labels . LABEL

    IF     shift, and go to state 15
    GOTO   shift, and go to state 16
    PUT    shift, and go to state 17
    ID     shift, and go to state 18
    LABEL  shift, and go to state 19

    stmt        go to state 25
    branch      go to state 21
    assignment  go to state 22


state 15

   21 branch: IF . simple_op LT simple_op GOTO ID
   22       | IF . simple_op LE simple_op GOTO ID
   23       | IF . simple_op GT simple_op GOTO ID
   24       | IF . simple_op GE simple_op GOTO ID
   25       | IF . simple_op NE simple_op GOTO ID
   26       | IF . simple_op EQ simple_op GOTO ID

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 28


state 16

   20 branch: GOTO . ID

    ID  shift, and go to state 29


state 17

   17 stmt: PUT . simple_op
   18     | PUT . ID '[' simple_op ']'

    ID           shift, and go to state 30
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 31


state 18

   19 stmt: ID . '=' GET
   27 assignment: ID . '=' simple_op
   28           | ID . '=' simple_op '+' simple_op
   29           | ID . '=' simple_op '-' simple_op
   30           | ID . '=' simple_op '*' simple_op
   31           | ID . '=' simple_op '/' simple_op
   32           | ID . '=' ID '[' simple_op ']'
   33           | ID . '[' simple_op ']' '=' simple_op

    '['  shift, and go to state 32
    '='  shift, and go to state 33


state 19

   13 opt_labels: opt_labels LABEL .

    $default  reduce using rule 13 (opt_labels)


state 20

   12 code: opt_labels stmt .

    $default  reduce using rule 12 (code)


state 21

   16 stmt: branch .

    $default  reduce using rule 16 (stmt)


state 22

   15 stmt: assignment .

    $default  reduce using rule 15 (stmt)


state 23

   10 name_list: ID '[' INT_LITERAL . ']'

    ']'  shift, and go to state 34


state 24

    7 name_list: name_list ',' ID .
    8          | name_list ',' ID . '[' INT_LITERAL ']'

    '['  shift, and go to state 35

    $default  reduce using rule 7 (name_list)


state 25

   11 code: code opt_labels stmt .

    $default  reduce using rule 11 (code)


state 26

   34 simple_op: ID .

    $default  reduce using rule 34 (simple_op)


state 27

   35 simple_op: INT_LITERAL .

    $default  reduce using rule 35 (simple_op)


state 28

   21 branch: IF simple_op . LT simple_op GOTO ID
   22       | IF simple_op . LE simple_op GOTO ID
   23       | IF simple_op . GT simple_op GOTO ID
   24       | IF simple_op . GE simple_op GOTO ID
   25       | IF simple_op . NE simple_op GOTO ID
   26       | IF simple_op . EQ simple_op GOTO ID

    LT  shift, and go to state 36
    LE  shift, and go to state 37
    GT  shift, and go to state 38
    GE  shift, and go to state 39
    EQ  shift, and go to state 40
    NE  shift, and go to state 41


state 29

   20 branch: GOTO ID .

    $default  reduce using rule 20 (branch)


state 30

   18 stmt: PUT ID . '[' simple_op ']'
   34 simple_op: ID .

    '['  shift, and go to state 42

    $default  reduce using rule 34 (simple_op)


state 31

   17 stmt: PUT simple_op .

    $default  reduce using rule 17 (stmt)


state 32

   33 assignment: ID '[' . simple_op ']' '=' simple_op

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 43


state 33

   19 stmt: ID '=' . GET
   27 assignment: ID '=' . simple_op
   28           | ID '=' . simple_op '+' simple_op
   29           | ID '=' . simple_op '-' simple_op
   30           | ID '=' . simple_op '*' simple_op
   31           | ID '=' . simple_op '/' simple_op
   32           | ID '=' . ID '[' simple_op ']'

    GET          shift, and go to state 44
    ID           shift, and go to state 45
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 46


state 34

   10 name_list: ID '[' INT_LITERAL ']' .

    $default  reduce using rule 10 (name_list)


state 35

    8 name_list: name_list ',' ID '[' . INT_LITERAL ']'

    INT_LITERAL  shift, and go to state 47


state 36

   21 branch: IF simple_op LT . simple_op GOTO ID

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 48


state 37

   22 branch: IF simple_op LE . simple_op GOTO ID

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 49


state 38

   23 branch: IF simple_op GT . simple_op GOTO ID

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 50


state 39

   24 branch: IF simple_op GE . simple_op GOTO ID

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 51


state 40

   26 branch: IF simple_op EQ . simple_op GOTO ID

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 52


state 41

   25 branch: IF simple_op NE . simple_op GOTO ID

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 53


state 42

   18 stmt: PUT ID '[' . simple_op ']'

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 54


state 43

   33 assignment: ID '[' simple_op . ']' '=' simple_op

    ']'  shift, and go to state 55


state 44

   19 stmt: ID '=' GET .

    $default  reduce using rule 19 (stmt)


state 45

   32 assignment: ID '=' ID . '[' simple_op ']'
   34 simple_op: ID .

    '['  shift, and go to state 56

    $default  reduce using rule 34 (simple_op)


state 46

   27 assignment: ID '=' simple_op .
   28           | ID '=' simple_op . '+' simple_op
   29           | ID '=' simple_op . '-' simple_op
   30           | ID '=' simple_op . '*' simple_op
   31           | ID '=' simple_op . '/' simple_op

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60

    $default  reduce using rule 27 (assignment)


state 47

    8 name_list: name_list ',' ID '[' INT_LITERAL . ']'

    ']'  shift, and go to state 61


state 48

   21 branch: IF simple_op LT simple_op . GOTO ID

    GOTO  shift, and go to state 62


state 49

   22 branch: IF simple_op LE simple_op . GOTO ID

    GOTO  shift, and go to state 63


state 50

   23 branch: IF simple_op GT simple_op . GOTO ID

    GOTO  shift, and go to state 64


state 51

   24 branch: IF simple_op GE simple_op . GOTO ID

    GOTO  shift, and go to state 65


state 52

   26 branch: IF simple_op EQ simple_op . GOTO ID

    GOTO  shift, and go to state 66


state 53

   25 branch: IF simple_op NE simple_op . GOTO ID

    GOTO  shift, and go to state 67


state 54

   18 stmt: PUT ID '[' simple_op . ']'

    ']'  shift, and go to state 68


state 55

   33 assignment: ID '[' simple_op ']' . '=' simple_op

    '='  shift, and go to state 69


state 56

   32 assignment: ID '=' ID '[' . simple_op ']'

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 70


state 57

   28 assignment: ID '=' simple_op '+' . simple_op

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 71


state 58

   29 assignment: ID '=' simple_op '-' . simple_op

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 72


state 59

   30 assignment: ID '=' simple_op '*' . simple_op

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 73


state 60

   31 assignment: ID '=' simple_op '/' . simple_op

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 74


state 61

    8 name_list: name_list ',' ID '[' INT_LITERAL ']' .

    $default  reduce using rule 8 (name_list)


state 62

   21 branch: IF simple_op LT simple_op GOTO . ID

    ID  shift, and go to state 75


state 63

   22 branch: IF simple_op LE simple_op GOTO . ID

    ID  shift, and go to state 76


state 64

   23 branch: IF simple_op GT simple_op GOTO . ID

    ID  shift, and go to state 77


state 65

   24 branch: IF simple_op GE simple_op GOTO . ID

    ID  shift, and go to state 78


state 66

   26 branch: IF simple_op EQ simple_op GOTO . ID

    ID  shift, and go to state 79


state 67

   25 branch: IF simple_op NE simple_op GOTO . ID

    ID  shift, and go to state 80


state 68

   18 stmt: PUT ID '[' simple_op ']' .

    $default  reduce using rule 18 (stmt)


state 69

   33 assignment: ID '[' simple_op ']' '=' . simple_op

    ID           shift, and go to state 26
    INT_LITERAL  shift, and go to state 27

    simple_op  go to state 81


state 70

   32 assignment: ID '=' ID '[' simple_op . ']'

    ']'  shift, and go to state 82


state 71

   28 assignment: ID '=' simple_op '+' simple_op .

    $default  reduce using rule 28 (assignment)


state 72

   29 assignment: ID '=' simple_op '-' simple_op .

    $default  reduce using rule 29 (assignment)


state 73

   30 assignment: ID '=' simple_op '*' simple_op .

    $default  reduce using rule 30 (assignment)


state 74

   31 assignment: ID '=' simple_op '/' simple_op .

    $default  reduce using rule 31 (assignment)


state 75

   21 branch: IF simple_op LT simple_op GOTO ID .

    $default  reduce using rule 21 (branch)


state 76

   22 branch: IF simple_op LE simple_op GOTO ID .

    $default  reduce using rule 22 (branch)


state 77

   23 branch: IF simple_op GT simple_op GOTO ID .

    $default  reduce using rule 23 (branch)


state 78

   24 branch: IF simple_op GE simple_op GOTO ID .

    $default  reduce using rule 24 (branch)


state 79

   26 branch: IF simple_op EQ simple_op GOTO ID .

    $default  reduce using rule 26 (branch)


state 80

   25 branch: IF simple_op NE simple_op GOTO ID .

    $default  reduce using rule 25 (branch)


state 81

   33 assignment: ID '[' simple_op ']' '=' simple_op .

    $default  reduce using rule 33 (assignment)


state 82

   32 assignment: ID '=' ID '[' simple_op ']' .

    $default  reduce using rule 32 (assignment)
