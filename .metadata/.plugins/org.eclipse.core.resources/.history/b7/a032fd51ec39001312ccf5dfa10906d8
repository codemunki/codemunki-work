package world_builder;

import javax.xml.parsers.DocumentBuilder; 
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Entity;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import java.io.File;

import MiniMUDShared.*;

public class WorldImporter
{
	public enum ErrorCode
	{
		Success,
		Exception,
		InsertFailed,
		INVALID_ROOMS_TAG,
		INVALID_ID
	}
	
	private String m_strDataFile;
	private DatabaseConnector m_dbConn;
	
	public WorldImporter(String strDataFile, DatabaseConnector dbConn)
	{
		setDataFile(strDataFile);
		setDBConn(dbConn);
	}
	
	private void setDataFile(String strDataFile)
	{
		m_strDataFile = strDataFile;
	}
	
	private void setDBConn(DatabaseConnector dbConn)
	{
		m_dbConn = dbConn;
	}
	
	private DatabaseConnector getDBconn()
	{
		return m_dbConn;
	}
	
	public ErrorCode importData()
	{
		ErrorCode retVal = ErrorCode.Success;
		
		try
		{
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			dbf.setValidating(true);
			DocumentBuilder db = dbf.newDocumentBuilder(); 
			Document doc = db.parse(new File(m_strDataFile));
			
			System.out.println("Parse successful");
			
			retVal = parseAndImportXML(doc);
		}
		catch(Exception e)
		{
			System.out.println("Exception in WorldImporter.importData(): " + e);
			retVal = ErrorCode.Exception;
		}
		
		return retVal;
	}
	
	public ErrorCode parseAndImportXML(Document doc)
	{
		ErrorCode retVal = ErrorCode.Success;
		
		try
		{
			while(true)
			{
				// Get <room>
				NodeList rootList = doc.getDocumentElement().getElementsByTagName(XMLNames.ROOMS);
				
				if(null == rootList || rootList.getLength() != 1)
				{
					retVal = ErrorCode.INVALID_ROOMS_TAG;
					System.out.println("Invalid <rooms> tag.");
					break;
				}
			
				Node rooms = rootList.item(0);
				
				NodeList roomList = rooms.getChildNodes();
				
				if(null == roomList || 0 == roomList.getLength())
				{
					retVal = ErrorCode.INVALID_ROOMS_TAG;
					System.out.println("Invalid <rooms> tag.");
					break;
				}
				
				for(int i = 0; i < roomList.getLength(); i++)
				{
					Node room = roomList.item(i);
					
					String strNodeName = room.getNodeName();
					
					// Make sure this is a <room> node
					if(0 == strNodeName.compareTo(XMLNames.ROOM))
					{
						// Process Room node
						retVal = processRoomElement(room);
					}
				}
				
				break;
			}
		}
		catch(Exception e)
		{
			System.out.println("Exception in WorldImporter.parseAndImportXML(): " + e);
			retVal = ErrorCode.Exception;
		}
		
		return retVal;
	}
	
	private ErrorCode processRoomElement(Node room)
	{
		ErrorCode retVal = ErrorCode.Success;
		
		int nID = 0;
		String strName = "";
		String strDescription = "";
		
		String strTemp = "";
		
		RegularExpressions regEx = new RegularExpressions();
		
		try
		{
			while(true)
			{
				NodeList nodes = room.getChildNodes();
				
				for(int i = 0; i < nodes.getLength(); i++)
				{
					Node node = nodes.item(i);
							
					String content = room.getLastChild().getTextContent().trim();
					
					String nodeName = node.getNodeName();
					
					if(0 == nodeName.compareTo(XMLNames.ID))
					{
						if(regEx.stringMatchesRegEx(content, RegularExpressions.RegExID.ID))
						{
							nID = Integer.parseInt(content);
						}
						else
						{
							retVal = ErrorCode.INVALID_ID;
							System.out.println("Invalid ID specified.");
						}
					}
					else if if(0 == nodeName.compareTo(XMLNames.NAME))
					{
					}
					if(0 == nodeName.compareTo(XMLNames.DESCRIPTION))
					{
						
					}
				}

				break;
			}
		}
		catch(Exception e)
		{
			System.out.println("Exception in WorldImporter.processRoomElement(): " + e);
			retVal = ErrorCode.Exception;
		}
		
		return retVal;
	}
}
